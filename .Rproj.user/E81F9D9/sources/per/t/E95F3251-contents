# Inputs for atmospheric models with `eixport` Package {#ep}

This last chapter of this book is about generating inputs for atmospheric
models, specifically, **WRF-Chem** [@Grelletal2005]. As the Pacific Northwest 
National Laboratory (PNNL, https://www.pnnl.gov/atmospheric/research/wrf-chem/)
defines:


**The Weather Research and Forecasting (WRF) model is a next generation **
**meteorological model being developed collaboratively among several agencies**
**(NOAA/NCEP, NOAA/ESRL, NCAR). WRF-Chem is a version of WRF that also**
**simultaneously simulates the emission, turbulent mixing, transport,**
**transformation, and fate of trace gases and aerosols.**

Initially, VEIN counted with the function `emis_wrf` which created a data.frame
object of hourly gridded emissions with each pollutant as a column, from the
first cell to the last. The data-frame extendend in long format to each hour.
This data.frame was designed to be used with script Another Asimilation
System for WRF (AS4WRF) [@VaraVelaetal2015] written in NCL [@ncl]. 

This approach was effective and already tested for some Latinamerican cities
[@micro], [@icshmo]. However, this function depends on external software which
may not be available. Therefore, me andsome collegues developed the package
`eixport` [@eixport], [@eixport2], which is an R package to read and export
emissions to atmospheric models. `eixport` currently covers the models
WRF-Chem [@Grelletal2005], SPM-BRAMS [@Freitasetal2005] and R-LINE [@rline], but
only the WRF-Chem interface has been fully implemented. Therefore, this chapter
covers only this model.

The concept of connecting VEIN and Wrf-Chem via eixport is quite simple with
two approaches:

1. Generating `GriddedEmissionsArray` for the wrfinput grid and inputting this
emissions into the wrfchemi input file..
2. Generating gridded emissions data-frame for AS4WRF.

## WRFChem input with wrfinput and `GriddedEmissionsArray`

```{r , eval = FALSE, include = FALSE}
library(DiagrammeR)

p1 <- grViz("digraph boxes_and_circles {
      graph [overlap = false,
            fontsize = 10,
            rankdir = TB,
            fontname = Helvetica]


      node [shape = box,
            style = filled,
            fixedsize = false,
            fillcolor = white,
            color = black,
            fontcolor = black,
            fontize = 12]
      wrfinput_d0x;
      wrfcheminput;

      node [shape = box,
            style = filled,
            fillcolor = pink,
            fixedsize = false,
            color = black,
            fontcolor = black,
            fontize = 12]

      GriddedEmissionsArray;
      EmissionsArray;

      node [shape = box,
            style = filled,
            fixedsize = false,
            fillcolor = grey88,
            color = black,
            fontcolor = black,
            fontize = 12]
      make_grid;
      emis_grid;
      emis_post;
      emis_merge;
 
      node [shape = box,
            style = filled,
            fixedsize = false,
            fillcolor = green,
            color = black,
            fontcolor = black,
            fontize = 12]
      wrf_create;
      wrf_put;

      edge [color = black,
            arrowhead = vee,
            penwidth = 1.5]
      wrfinput_d0x -> {make_grid wrf_create}
      EmissionsArray -> emis_post
      emis_post -> emis_merge
      {make_grid emis_merge} -> {emis_grid}
      emis_grid -> GriddedEmissionsArray
      GriddedEmissionsArray -> wrf_put
      {wrf_put wrf_create} -> wrfcheminput
      }
      ")
```

The process for generation WRF-Chem input files with `GriddedEmissionsArray` is
shown on Fig. \@ref(fig:gea). Pink boxes are classes, grey boxes are `vein`
functions, green functions are  `eixport` functions and white boxes, external
objects. Here, the external input file is the **wrfinputd_0x**
file, where the **x** is for the domain. This file is inputted into the function
`make_grid` which creates a polygon grid needed by `emis_grid`. The main
characteristic of this grid, is that it has the resolution of the wrfinput
file.

The wrfinpiut_d0x file isalso used by the `eixport` function `wrf_create` to
create a wrfchemi input file with zeroes.

The objects with class `EmissionsArray` for each type of vehicle and pollutant are 
processed by the function `emis_post` which create street emissions. Then, the function
`emis_merge` merges all the street emissions files from `emis_post_ into one
street emissions by pollutant ehich is inputted into function `emis_grid` to
create a polygon grid of emissions, class Spatial Feature `sf` [@sf], [@RJ-2018-009].
Then, the spatial gridded emissions are inputted into the contructor function
`GriddedEmissionsArray` to create an object of that class, and the dimensions
of the wrfinput file, that is, the sanem number of spatial rows and columns.

Finally, the `GriddedEmissionsArray` objects are inputted into the wrfchemi
file with the `eixport` function `wrf_put`.

```{r gea, echo = FALSE, fig.cap='Generation of wrfchem inputs using GriddedEmissionsArray', out.width='50%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("figuras/gea.png")
```

Example

### Creating a WRF-Chem input file

The emission file will be generated with traffic simulation from the 
Traffic Engineering Company (CET) for 2012, which consists
in traffic flow for morning rush hour of Light Duty Vehicles (LDV) and
Heavy Good Vehicles (HGV). The emission factors will be the data `fe2015`
and the wrfinput comes from the `eixport` package. Let's go:

#### 0) Network

The object net has a class `SpatialLinesDataFrame`, we transform it into a
`sf`object. The length of the road is the field 'lkm' in the object net, which
are in km but has no units. We must add the right units in order to use `vein`

```{r}
require(vein)
require(sf)
require(units)
net <- readRDS("figuras/net.rds")
class(net)
net <- st_as_sf(net)
net[1, ]
net$lkm <- set_units(st_length(net), km) # ensure right units
```


#### 1) Vehicular composition

In this case, the vehicular composition consits in only to vehicles, Passenger
Cars using Gasoline with 25\% of Ethanol and Light Trucks consuming Diesel with 
5\% od biodiesel. Also, the emission factors cover $CO$. The
temporal distribution will cover only one hour.

```{r}
PC_E25 <- age_ldv(net$ldv)
LT_B5 <- age_hdv(net$hdv)
```

#### 2) Emission factors

The emission factors used comes from -@CETESB, which are constant by age of use.
In practice, this data.frame is like an Excel spreadsheet. Then, the constructor
function `EmissionFactorsList` convert our numeric vector, which is the column
of our data.frame, into required type of object of the `emis` function. Parenthesis
were added in order to print the objects in one line.

```{r}
data(fe2015)
(EF_CO_PC_E25 <- EmissionFactorsList(fe2015[fe2015$Pollutant == "CO", "PC_G"]))
(EF_CO_LT_B5 <- EmissionFactorsList(fe2015[fe2015$Pollutant == "CO", "LT"]))
```
#### 3) Estimation of emissions


```{r}

```

## `to_wrf`

